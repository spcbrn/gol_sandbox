(() => {
  function t({ x: t, y: i, living: e, bio_mode: s, game: r }) {
    (this.game = r),
      (this.coordinates = [t, i]),
      (this.x = t),
      (this.y = i),
      (this.key = `${t}.${i}`),
      (this.nCoords = []),
      (this.living = e),
      (this.bioMode = s),
      this.bioMode
        ? (() => {
            (this.dna = []), (this.art = []), (this.newArt = []);
          })()
        : (this.livingNeighbors = 0),
      (this.subscribedToRegister = !1),
      this._initializeCell();
  }
  let i = 0;
  class e {
    constructor({
      width: t,
      height: i,
      render: e,
      use_raf: s,
      bio_mode: r,
      seed_frame: o,
      random: h
    }) {
      (this.width = t || 50),
        (this.height = i || 50),
        (this.grid = null),
        (this.gridBinary = null),
        (this.useRandomGrid = h || !1),
        o instanceof Array &&
          o[0] instanceof Array &&
          'number' == typeof o[0][0] &&
          (() => {
            (this.gridBinary = o),
              (this.height = o.length),
              (this.width = o[0].length);
          })(),
        (this.bioMode = r || !1),
        (this.dutyCycle = []),
        (this.frameRegister = []),
        (this.interval = null),
        (this._to = null),
        (this.framesElapsed = 0),
        (this.useRequestAnimationFrame = s || !0),
        (this.render = t => e(this.gridBinary, this.framesElapsed, t)),
        this._populateGameGrid();
    }
  }
  (e.prototype.initializeGame = function(t, i = 0) {
    (this.interval = t || 200),
      this.useRequestAnimationFrame
        ? window.requestAnimationFrame(this.render)
        : this.render(),
      (this._to = this._runGameLoop(i));
  }),
    (e.prototype._runGameLoop = function(t) {
      return t && this.framesElapsed >= t
        ? clearTimeout(this._to)
        : setTimeout(() => {
            this._dispatchRunDutyCycle(),
              this._dispatchApplyRulesToRegister(),
              this.useRequestAnimationFrame
                ? window.requestAnimationFrame(this.render)
                : this.render(),
              this.framesElapsed++,
              (this._to = this._runGameLoop(t));
          }, this.interval);
    }),
    (e.prototype._populateGameGrid = function() {
      (this.gridBinary = this.gridBinary
        ? this.gridBinary
        : this._generateNewBinaryGrid({
            width: this.width,
            height: this.height,
            random: this.useRandomGrid
          })),
        (this.grid = this.gridBinary.map((i, e) =>
          i.map(
            (i, s) =>
              new t({
                x: s,
                y: e,
                living: i,
                bio_mode: this.bioMode,
                game: this
              })
          )
        ));
    }),
    (e.prototype._generateNewBinaryGrid = function({
      width: t,
      height: i,
      random: e
    }) {
      const s = Array(i).fill(Array(t).fill(0));
      return e ? this._randomizeGameGrid(s) : s;
    }),
    (e.prototype._randomizeGameGrid = t => {
      for (let i in t) t[i] = t[i].map(() => (0.936 < Math.random() ? 1 : 0));
      return t;
    }),
    (e.prototype._subscribeCellToDutyCycle = function(t) {
      this.dutyCycle.push(t);
    }),
    (e.prototype._dispatchRunDutyCycle = function() {
      this.dutyCycle = this.dutyCycle.filter(
        t => !('function' != typeof t) && (() => (t(), !1))()
      );
    }),
    (e.prototype._subscribeCellToFrameRegister = function(t) {
      this.frameRegister.push(t);
    }),
    (e.prototype._dispatchApplyRulesToRegister = function() {
      this.frameRegister = this.frameRegister.filter(
        t =>
          !('function' != typeof t) &&
          (() => (
            t((t, i) => {
              this.gridBinary[t[1]][t[0]] = i;
            }),
            !1
          ))()
      );
    }),
    (t.prototype._living = function() {
      return 1 === this.living;
    }),
    (t.prototype._initializeCell = function() {
      this._living() &&
        (() => {
          this.game._subscribeCellToDutyCycle(() =>
            this._distributeLifeForce()
          ),
            this.bioMode &&
              (this.dna = [
                this._produceDNA(),
                this._produceDNA(),
                this._produceDNA()
              ]);
        })();
    }),
    (t.prototype._getNeighborCoordinates = function() {
      return this.nModifiers.map(t => {
        const i = this.x + t[0],
          e = this.y + t[1];
        return 0 <= i && i < this.game.width && 0 <= e && e < this.game.height
          ? [i, e]
          : null;
      });
    }),
    (t.prototype.nModifiers = [
      [-1, -1],
      [0, -1],
      [1, -1],
      [-1, 0],
      [1, 0],
      [-1, 1],
      [0, 1],
      [1, 1]
    ]),
    (t.prototype._produceDNA = function() {
      return (
        String.fromCharCode(Math.ceil(25 * Math.random() + 65)) +
        String.fromCharCode(Math.ceil(25 * Math.random() + 65))
      );
    }),
    (t.prototype._produceArt = function() {
      return (
        String.fromCharCode(Math.ceil(103 * Math.random() + 152)) +
        String.fromCharCode(Math.ceil(103 * Math.random() + 152)) +
        String.fromCharCode(Math.ceil(103 * Math.random() + 152))
      );
    }),
    (t.prototype._distributeLifeForce = function() {
      this.nCoords.length || (this.nCoords = this._getNeighborCoordinates());
      let t = 0;
      return (
        this.nCoords.forEach(i => {
          if (null !== i) {
            const e = this.game.grid[i[1]][i[0]];
            e._living()
              ? (() => {
                  e._absorbLifeForce(this.bioMode && this._produceArt()), t++;
                })()
              : e._absorbLifeForce(this.bioMode && this._produceDNA());
          }
        }),
        t ||
          (this.bioMode
            ? this._absorbLifeForce(this._produceArt())
            : (() => {
                this.game._subscribeCellToFrameRegister(t =>
                  this._applyRules(t)
                ),
                  (this.subscribedToRegister = !0);
              })()),
        !1
      );
    }),
    (t.prototype._absorbLifeForce = function(t) {
      this.living
        ? this.bioMode
          ? this.newArt.push(t)
          : this.livingNeighbors++
        : this.bioMode
        ? this.dna.push(t)
        : this.livingNeighbors++,
        this.subscribedToRegister ||
          (() => {
            this.game._subscribeCellToFrameRegister(t => this._applyRules(t)),
              (this.subscribedToRegister = !0);
          })();
    }),
    (t.prototype._applyRules = function(t) {
      const i = this.bioMode
          ? this.living
            ? this.newArt.length
            : this.dna.length
          : this.livingNeighbors,
        e = 1 === this.living ? (1 >= i || 4 <= i ? 0 : 1) : 3 === i ? 1 : 0;
      return (
        e &&
          (() => {
            this.game._subscribeCellToDutyCycle(() =>
              this._distributeLifeForce()
            ),
              this.living && this.bioMode && this.art.concat(this.newArt);
          })(),
        !e &&
          this.bioMode &&
          (() => {
            this.dna = [];
          })(),
        (this.living = e),
        (this.subscribedToRegister = !1),
        this.bioMode ? (this.newArt = []) : (this.livingNeighbors = 0),
        t(this.coordinates, e)
      );
    });
  const s = document.createElement('div');
  s.setAttribute('id', 'dom_root'),
    s.setAttribute(
      'style',
      '\n        width:0px;\n        height:0px;\n        position:relative;\n        z-index:1111;\n    '
    );
  const r = document.createElement('canvas');
  r.setAttribute('id', 'c_root'),
    r.setAttribute('width', '512px'),
    r.setAttribute('height', '512px'),
    r.setAttribute(
      'style',
      '\n        position:absolute;\n        left:calc(50vw - 256px);\n        top:calc(50vh - 256px);\n        background:#F5F5F5;\n    '
    ),
    document.body.prepend(s),
    s.appendChild(r);
  const o = document.getElementById('c_root'),
    h = o.getContext('2d');
  h.font = '24px serif';
  const n = o.width / 96,
    a = o.height / 96;
  new e({
    width: 96,
    height: 96,
    render: (t, e) => {
      h.clearRect(0, 0, o.width, o.height),
        (t =>
          t.forEach((t, i) =>
            t.forEach((t, e) => {
              (h.fillStyle = 1 === t ? '#222222' : '#FFFFFF'),
                h.fillRect(e * n, i * a, n - 1, a - 1);
            })
          ))(t),
        (t => {
          (h.fillStyle = '#000000'),
            h.fillText(
              `generations: ${t}   fps: ${
                2 <= i ? Math.floor((10 * t) / i) : '--'
              }`,
              12,
              o.height - 12
            );
        })(e);
    },
    useRAF: !0,
    random: !0
  }).initializeGame(93),
    (() => window.setInterval(() => i++, 100))();
})();
